import { BlogPost } from "@/lib/types";
const basePath = process.env.NODE_ENV === 'production' ? '/julie' : '';

export const til20250304: BlogPost = {
    slug: "til/2025-03-04",
    categorySlug: "til",
    title: {
        ko: "2025-03-04",
        en: "2025-03-04",
    },
    date: "2025-03-04 17:01",
    category: {
        ko: "TIL",
        en: "TIL",
    },
    description: {
        ko: "2주 동안의 알고리즘 공부 회고",
        en: "Reflections on grinding leetcode for 2 weeks",
    },
    content: `
지난 2주 (2025.02.15 - 2025.03.03) 동안 알고리즘 공부를 정말 열심히 했다.
체감상 예전에 처음으로 풀타임 취업 준비했을 때보다 훨씬 더 몰입해서 한 것 같다. 

![2월 기준](${basePath}/assets/til-004-20250304-2.png)
![3월 3일 기준](${basePath}/assets/til-004-20250304-1.png)

이 기간 동안 총 **254문제**를 풀었는데, **Easy 82문제, Medium 157문제, Hard 15문제**였다. 
중간에 복습 차원에서 두세 번 다시 푼 문제들도 있고, 처음 접하는 문제도 있었다.

이 때 사실 중간고사까지 겹쳐서(2월 말에 문제 조금만 푼 날들은 중간고사 대비한 날들) 스트레스가 꽤 심했다.
어떤 날은 아직 할게 많이 남았다는 불안한 마음에 휴가까지 써가면서 풀었다.

> 개인적으로 기회가 찾아왔을 때 노력하지 않아서 놓치는 상황을 견디기가 어렵ㄷㅏ .. 
차라리 최선을 다했는데도 안 됐다면 그냥 지금 당장은 나와 잘 맞지 않는 거라고 생각하고 넘길 수 있다.
이 블로그도 그런 의미에서, 내가 공부한 내용을 잊지 않고 나중에 다시 참고하려는 목적의 일환이다.

사실 학부생 때부터 알고리즘이 강한 편은 아니었는데, 다행히 100문제 정도 풀었을 때 취업을 해서 이후엔 1년에 몇십 문제 정도만 복습하면서 살았다. 
그런데 요즘 이직을 고민하면서 **"혹시 알고리즘이 발목을 잡으면 어떡하지?"** 하는 불안감이 커졌고, 그래서 이번에 집중적으로 공부했던 것 같다.

그래도 이제는 Easy/Medium 문제를 보면 처음 보는 유형이 아닌 이상 대충 감이 오고, 풀이 방법이 떠오르는 수준까지 왔다. (하지만 Hard 문제는 아직 어렵다 😂)

### 2주 Grinding에 도움이 되었던 방법

이 방법들은 어느 정도 알고리즘 / 데이터구조 사전 지식이 있을 때 통하는 방법이다!
없으면 나는 neetcode에서 처음부터 시간을 들여 공부하는 것을 추천한다..!

1. **Neetcode.io**
    
    Neetcode는 학부 때부터 자주 봤던 유튜브 채널인데, 이제는 웹사이트까지 생겨서 훨씬 체계적으로 정리되어 있다. 
    문제 설명이 엄청 깔끔하고 이해하기 쉬운데, 가끔 난해하게 설명되는 문제들이 있으면 **Greg Hogg 유튜브**를 참고했다.
    
    특히 **Roadmap** 기능이 있어서, 어떤 문제에 어떤 자료구조를 써야 할지 감이 잘 안 잡히는 사람에게 정말 유용하다. 
       
    알고리즘 문제들은 처음부터 최적화된 솔루션을 찾으려고 하면 오히려 더 어렵다. 
    (문제 by 문제 지만) 대부분의 문제는 **Brute force → 최적화 과정**을 거치면서 풀이를 발전시키는 게 더 좋은 접근이다.

2. **70 leetcode problems in 5+ hours (youtube 영상)**
    
    이 영상은 Leetcode 70문제를 5시간 30분짜리 영상 안에 담아둔 건데, 주말 이틀 동안 따라가면서 문제를 풀어봤다.
    
    실제로 다 풀어보려면 영상 시간의 두 배 정도 걸리는 느낌이다. 
    하지만 의지가 약하거나 집중력이 흐려질 때는 이런 영상이 꽤 도움이 된다. 
    그냥 **"같이 풀어보는 느낌"** 이 들면서 계속 문제를 풀게 된다.
    
3. **google docs에 정리**
    
    ![google doc](${basePath}/assets/til-004-20250304-3.png)
    
    문제를 풀 때마다 문제 이름, 난이도, 풀이 방법, 시간 복잡도를 정리했다.
    
    **굵게 표시된 문제 → 한 번에 못 풀었던 문제**이고,
    못 풀었던 문제들은 나중에 다시 돌아가서 한 줄 설명을 보고도 또 기억이 안 나면 또 풀기를 반복했다.
    
4. **google sheets에 정리**

    ![google sheets](${basePath}/assets/til-004-20250304-4.png)
    
    어느 정도 문제를 풀고 나면, 다시 풀어야겠다고 생각되는 문제들을 엑셀에 정리하고, 문제를 다시 풀면서 **더 간단한 한 줄 요약을 추가**했다.
    
    면접이나 코딩 테스트 직전에 Redo 체크된 문제들 위주로 복습했고, 체크가 안 되어 있어도, 1. 문제 이름 보고 풀이가 안 떠오르면 2. 한 줄 설명을 보고, 그래도 기억 안 나면 3. 다시 풀었다.

웃긴 건 이렇게 열심히 연습했는데, 실제 면접에서는 구현 문제가 나왔고 내 머리가 하얘졌다는 점...

그래도 그 전보단 훨씬 자신감이 생긴 것 같다! ;)
`,

};

