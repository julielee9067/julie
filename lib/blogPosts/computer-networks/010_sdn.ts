import { BlogPost } from "@/lib/types";

export const cnSDN: BlogPost = {
    slug: "computer-networks/sdn",
    categorySlug: "computer-networks",
    title: {
        ko: "SDN",
        en: "Software Defined Networking",
    },
    date: "2025-03-06 20:28",
    category: {
        ko: "컴퓨터 네트워크",
        en: "Computer Networks",
    },
    description: {
        ko: "소프트웨어 정의 네트워킹",
        en: "Software Defined Networking",
    },
    content: `
## 개요
네트워크에서 제어(Control)와 데이터(Data) plane을 분리할 필요성이 커지면서, 네트워크가 점점 더 복잡해지고 다양한 문제들이 발생하였습니다.

이런 문제들을 해결하기 위해 SDN이 개발되었는데, 이게 어떻게 개발되었고 아키텍쳐는 어떻게 구성되었는지 알아보도록 하겠습니다.

## SDN의 등장 배경
### 1. 네트워크 장비의 다양성
컴퓨터 네트워크에는 라우터, 스위치, 방화벽, NAT, load balancer와 같은 다양한 장비가 존재합니다.
각 장비마다 사용하는 프로토콜과 소프트웨어가 달라 이를 통합적으로 관리하기가 어렵고, 네트워크 관리 도구가 있어도 개별 장비의 설정을 일일이 조정해야 하므로 운영이 복잡합니다.

### 2. 폐쇄적이고 독점적인 기술
네트워크 장비는 제조 업체마다 설정 방식이 다르고, 같은 제조업체 제품끼리도 인터페이스가 다른 경우가 있습니다.
이 때문에 중앙에서 일관된 방식으로 관리하기가 어렵고, 특정 제조업체의 장비에 종속되는 문제가 발생합니다.

위와 같은 이유로 네트워크는 복잡해지고, 혁신 속도가 느려지고, 운영 비용이 증가하는 문제가 발생했습니다.

이를 해결하기 위해 SDN이 등장했는데, 핵심 개념은 작업의 분리입니다.

네트워크를 두 개의 계층(Plane)으로 나누는 방식인데, 네트워크 동작을 결정하는 제어 플레인, 실제 패킷을 전달하는 데이터 플레인으로 나뉩니다.

SDN을 사용하면 중앙에서 네트워크를 통합적으로 제어 가능하고, 새로운 기술/기능을 쉽게 적용할 수 있고, 독점적인 장비 의존도를 낮출 수 있다는 장점이 있습니다.

## Control plane과 Data plane을 분리하는 이유
기존 네트워크에서는 라우터가 control / data 플레인의 역할을 모두 수행했습니다.
하지만 SDN에서는 제어 플레인과 데이터 플레인을 분리하고, 각각 독립적으로 동작하게 설계합니다.

- Control plane: 네트워크 장비의 경로 선택 및 설정 담당 (routing protocol, firewall policy, traffic management)
- Data plane: 실제 패킷 전달 (IP forwarding, layer 2 switching)

위와 같이 분리하는 이유는 다음과 같습니다.

1. 독립적인 진화와 개발 가능
    
    기존 네트워크는 라우터가 이 일을 모두 담당했기 때문에, 한 기능을 변경하려면 하드웨어까지 업그레이드해야 하는 문제가 있었습니다.
    
    SDN에서는 라우터가 단순히 패킷을 전달하는 역할만 수행하므로 경로 설정과 패킷 전달을 개별적으로 개선할 수 있습니다.
    
2. 네트워크 제어 가능
    
    SDN에서는 소프트웨어를 활용해서 라우팅 테이블을 설정할 수 있습니다.
    
    기존 네트워크에서는 제어와 데이터가 결합되어 있어 네트워크 동작을 디버깅하고 수정하기 어려웠지만,
    SDN은 네트워크 동작을 중앙에서 소프트웨어 적으로 조정할 수 있어 디버깅 및 상태 점검이 쉬워집니다.

3. 다양한 분야 활용 가능
    
    대규모 데이터 센터에서는 수천개의 VM이 연결되어있어, 네트워크 관리가 매우 복잡하지만,
    SDN을 호라용하면 관리가 쉬워집니다.
    
    또한, 기존 BGP 기반의 네트워크 라우팅은 경로 선택 방식이 제한적이지만, SDN을 사용하면 좀 더 유연해집니다.

### Forwarding
포워딩은 라우터가 받은 패킷을 적절한 출력 링크로 보내는 과정입니다.
이 과정은 데이터 플레인에서 이루어집니다.

**포워딩 과정**
1. 라우터가 패킷의 헤더 확인
2. 해당 정보를 기반으로 포워딩 테이블 조회
3. 테이블에 저장된 번호를 바탕으로 패킷을 올바른 출력 포트로 전달
4. 필요에 따라 패킷을 차단하거나 복제할 수 있음

**특징**
1. 로컬(local) 기능: 각 라우터에서 개별적으로 수행됨
2. 매우 빠른 속도로 실행
3. 하드웨어에서 직접 구현됨

### Routing
라우팅은 네트워크 전체에서 송신지에서 목적지까지 패킷이 이동할 경로를 결정하는 컨트롤 플레인의 기능입니다.

**라우팅 과정**
1. 라우팅 알고리즘을 실행하여 최적의 경로 찾음
2. 이를 바탕으로 포워딩 테이블 생성

**특징**
1. 네트워크 전반벅인 기능 (개별 라우터가 아니라 네트워크 전체에서 수행)
2. 소프트웨어적으로 실행
3. 라우팅 프로토콜 사용 (OSPF, BGP)

## SDN 아키텍쳐

`,
};

