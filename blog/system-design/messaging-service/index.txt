2:"$Sreact.suspense"
3:I[1523,["851","static/chunks/851-4b7230f426f3d0c3.js","636","static/chunks/636-65bb31d056e95ffd.js","614","static/chunks/614-de6ae75424f2579f.js","797","static/chunks/app/blog/%5B...slug%5D/page-7a1b2e0cfa191dff.js"],"BailoutToCSR"]
5:I[4707,[],""]
7:I[6423,[],""]
8:I[3483,["648","static/chunks/648-f6f3afee71b2d583.js","768","static/chunks/app/blog/layout-54d880e6586f2601.js"],"default",1]
9:I[5495,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"ThemeProvider"]
a:I[4491,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"LanguageProvider"]
b:I[1890,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"Header"]
6:["slug","system-design/messaging-service","c"]
0:["bP1aEExmSmOiOrgA7CQon",[[["",{"children":["blog",{"children":[["slug","system-design/messaging-service","c"],{"children":["__PAGE__?{\"slug\":[\"system-design\",\"messaging-service\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","system-design/messaging-service","c"],{"children":["__PAGE__",{},[["$L1",["$","$2",null,{"fallback":null,"children":["$","$L3",null,{"reason":"next/dynamic","children":"$L4"}]}],null],null],null]},[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","$L8",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}],"params":{}}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/julie/_next/static/css/2688adaac3b51e6f.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/julie/_next/static/css/e680cef9016abb97.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_29e2ff","children":["$","$L9",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$La",null,{"children":[["$","$Lb",null,{}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}]}]}]}]],null],null],["$Lc",null]]]]
d:I[3124,["851","static/chunks/851-4b7230f426f3d0c3.js","636","static/chunks/636-65bb31d056e95ffd.js","614","static/chunks/614-de6ae75424f2579f.js","797","static/chunks/app/blog/%5B...slug%5D/page-7a1b2e0cfa191dff.js"],"default"]
e:T55b5,
`Togather` 프로젝트 (북미 대학생을 위한 익명 커뮤니티 앱) 를 만들면서, 자연스럽게 커뮤니티 플랫폼과 채팅 서비스의 시스템 디자인에 대해 관심을 갖게 되었습니다.

이번 글에서는 대규모 사용자를 대상으로 한 채팅 서비스의 시스템 디자인에 대해 살펴보겠습니다.

## 기능적 요구사항
1. **그룹 채팅 지원** – 여러 명이 함께 대화할 수 있는 그룹 메시지 기능이 필요함.
2. **메시지 송수신 기능** – 사용자가 메시지를 보내고 받을 수 있어야 함.
3. **오프라인 수신 가능** – 사용자가 오프라인 상태일 때도 메시지를 받을 수 있어야 하며, 다시 온라인이 되면 확인할 수 있어야 함.
4. **사진 및 미디어 전송 지원** – 텍스트뿐만 아니라 사진, 동영상 등 미디어 파일도 주고받을 수 있어야 함.

## 비기능적 요구사항
1. **빠른 메시지 전달 속도** – 온라인 상태인 사용자는 500ms(0.5초) 이내에 메시지를 받아야 함.
2. **메시지 전달 보장** – 메시지가 유실되지 않고 반드시 수신자에게 전달되어야 함.
3. **확장성** – 수십억 명의 사용자가 이용해도 원활하게 동작해야 함.
4. **필요한 메시지만 저장** – 메시지는 필요한 만큼만 보관하고, 불필요한 데이터는 자동으로 삭제되도록 관리해야 함.
5. **안정성 보장** – 특정 서버나 기능이 고장 나더라도 전체 서비스가 중단되지 않도록 시스템이 복구 및 대응할 수 있어야 함.
## Core entities
- Users
- Chats
- Messages
- Clients (devices)
## API 디자인
메시지가 매우 자주 주고받아지는 환경에서는, 매번 요청을 보내고 응답을 받는 REST API 방식은 비효율적입니다. REST API는 요청이 올 때마다 새로운 연결을 만들고, 응답을 받은 후 연결을 종료하기 때문에 실시간성이 중요한 서비스에서는 지연이 발생할 수 있습니다.

반면, 양방향 소켓 연결 (bi-directional socket connection) 은 한 번 연결을 설정하면 계속 유지되므로, 서버와 클라이언트가 실시간으로 데이터를 주고받을 수 있습니다. 
예를 들어, 채팅 서비스에서는 사용자가 메시지를 보내면 서버가 즉시 상대방에게 전달해야 하는데, 소켓 연결을 사용하면 별도의 요청 없이도 빠르게 메시지를 받을 수 있습니다.


즉, 자주 변하는 데이터를 실시간으로 주고받아야 하는 서비스에서는 REST API보다 소켓 연결이 훨씬 효율적입니다.

### 전송되는 명령
#### Create Chat: 대화방 생성
**Request**
```json
{
    "participants": ["user1", "user2"],
    "name": "Study Group"
}
```

#### Send Message: 메시지 전송
**Request**
```json
{
    "chatId": 1,
    "message": "hi",
    "attachments": ["sampleFile"]
}
```

#### Create Attachment: 첨부파일 생성
**Request**
```json
{
    "body": ...,
    "hash": ""
}
```

#### Modify Chat Participants, 대화방 인원 수정
**Request**
```json
{
    "chatId": 1,
    "userId": 1,
    "operation": "ADD" | "REMOVE"
}
```
위에 나열한 각 요청은 다른 클라이언트들에게도 동시에 전송됩니다. 클라이언트가 요청을 받으면, 서버에 `"명령을 정상적으로 받았다"`는 ACK (확인 응답) 메시지를 보냅니다.

이렇게 하면 서버는 `"이제 이 메시지를 다시 보낼 필요가 없겠구나"` 하고 확인합니다. (만약 ACK을 받지 못하면, 서버는 메시지가 제대로 전달되지 않았다고 판단하고 다시 보낼 수도 있습니다.)


### 수신되는 명령
#### New Message, 새로운 메시지 수신
**Request**
```json
{
    "chatId": 1,
    "userId": 1
    "message": "hi",
    "attachments": []
}
```

#### Chat Update, 대화방 업데이트
**Request**
```json
{
    "chatId": 1,
    "participants": ["user1"],
}
```

## High-Level Design
### 1. 그룹 채팅 지원: 최대 100명
```plaintext
+-----------+   (WebSocket Conn)    +---------+      +-------------+      +--------------------+
|  Client   | --------------------> |  L4 LB  | ---> | Chat Server | ---> | Database (DynamoDB) |
+-----------+                       +---------+      +-------------+      +--------------------+
```

#### 플로우
1. 사용자가 서비스에 연결한 후 createChat 요청을 보냅니다.
2. 서버는 한 트랜잭션 내에서 새로운 채팅방(Chat) 데이터를 생성하고, 해당 채팅방의 참여자(ChatParticipant) 정보도 함께 저장합니다.
3. 채팅방이 성공적으로 생성되면, 서버는 생성된 chatId를 사용자에게 반환합니다.

#### 사용 기술
- **L4(4계층) 로드밸런서**: 웹소켓 연결을 지원하며, 실시간 통신이 필요한 메시징 서비스에 적합합니다.
- **AWS DynamoDB**: 채팅방 생성 시 관련 데이터(참여자 정보, 생성 시간 등)를 저장하기 위해 사용됩니다. 빠른 Key-Value 성능과 뛰어난 확장성(Scalability) 을 제공하여 대규모 사용자 환경에서도 안정적으로 동작합니다.

여기서 다른 데이터베이스가 아닌 `AWS DynamoDB`를 사용하는 이유는 다음과 같습니다.
- **확장성**: 자동으로 수평 확장 되므로, 사용자가 많이 늘어나는 상황에서도 안정적으로 동작합니다. RDBMS는 일정 규모가 넘어가면 샤딩을 직접 관리해야 하는데, DynamoDB는 이를 자동으로 처리해줍니다. 같은 NoSQL 데이터베이스인 MongoDB와 같은 경우에도, 수평 확장이 가능하지만, 샤딩과 클러스터 관리를 직접 해야합니다.
- **Low latency**: key-value 기반이라 초당 수백만건의 요청을 빠르게 처리할 수 있습니다. 지연 시간을 최소화 하기 좋습니다. 쿼리 기능은 제한적이지만, Composite key와 GSI를 이용해 특정 조회 패턴을 빠르게 지원합니다.
- **비용 효율성**: 온디맨드 모델을 사용하면, 실제 사용한 만큼만 비용을 지불합니다. 고성능 환경에서 RDBMS를 유지하려면 서버 증설 등에 비용이 크게 늘어날 수 있습니다.

#### DB Index 설계: `ChatParticipant` 테이블
`ChatParticipant` 테이블은 다음과 같은 두 가지 기능을 지원해야 합니다.
1. 특정 채팅방에 참여한 모든 사용자 조회
2. 특정 사용자가 참여 중인 모든 채팅방 조회

이를 위해, DynamoDB의 `Composite primary key`와 `GSI(Global Secondary Indexes)`를 활용해야 합니다.
DynamoDB는 테이블을 만들 때 기본 키로 설정되는 두 가지 유형의 Primary key를 지원하는데, 단일 partition key (우리가 아는 기본 primary key), composite key (partition key + sort key) 로 나누어져 있습니다.

DynamoDB의 composite key는 partition key + sort key 조합으로 테이블을 구성하는 방식인데, 같은 Partition key 값을 가진 여러 개의 데이터를 저장할 수 있습니다. Partition key로 데이터를 그룹화하고, Sort key로 정렬하는 방식입니다.


우리가 `chatId`를 **Partition Key**, `participantId`를 **Sort Key**로 설정하면 특정 채팅방(`chatId`)에 속한 모든 사용자를 손쉽게 조회할 수 있습니다. 하지만, **"특정 사용자가 속한 모든 채팅방을 알고 싶다"** 라는 쿼리를 실행하려면 `participantId`를 기준으로 검색해야 합니다. 이를 가능하게 하기 위해 **GSI(Global Secondary Index)** 를 추가해야 합니다.
**GSI**는 DynamoDB에서 테이블 생성 후 추가 가능한 추가적인 조회 패턴을 지원하기 위해 사용되는 인덱스입니다. 여기서 Partition key를 `participantId`로, sort key를 `chatId`로 설정하면 특정 유저가 참여한 모든 채팅방을 효율적으로 조회할 수 있습니다.

GSI가 **"Global"한 이유**는, **기본 테이블의 Partition Key와 상관없이 전역적으로 데이터를 검색할 수 있기 때문**입니다. 반면, **LSI(Local Secondary Index)** 는 특정 Partition 내부에서만 작동하므로, 예를 들어 특정 채팅방 내에서 가장 최근 메시지를 검색할 때(`chatId -> timestamp`) LSI를 활용할 수 있습니다.

**요약**
1. Composite Primary Key(`chatId` + `participantId`)를 사용하면, 특정 `chatId`에 속한 모든 사용자를 빠르게 조회할 수 있습니다.
2. GSI(`participantId` + `chatId`)를 추가하면, 특정 사용자가 속한 모든 채팅방을 효율적으로 검색할 수 있습니다.

### 2. 메시지 송수신 기능
우선 문제를 단순화하기 위해, **서버가 하나만 존재한다고 가정**해보겠습니다. 또한, 앞서 언급한 것처럼 **웹소켓(WebSocket) 연결을 사용하여 실시간 메시지를 주고받도록 설계**합니다.


유저가 채팅 서버에 웹소켓을 통해 연결하면, **서버는 해당 유저의 연결 정보를 해시맵(HashMap)에 저장**합니다. 이렇게 하면 **현재 어떤 유저가 서버에 연결되어 있는지 파악할 수 있으며, 연결된 유저에게 메시지를 직접 전달**할 수 있습니다.

#### 메시지 송신 플로우 (1차 버전)
1. 유저가 `sendMessage` 요청을 서버에 보냅니다.  
2. 서버는 데이터베이스의 `ChatParticipant` 테이블을 조회하여, **해당 채팅방에 속한 모든 참여자 목록을 가져옵니다.**  
3. 서버는 **내부 해시맵을 확인하여 현재 웹소켓 연결이 활성화된 유저들에게만 메시지를 전송합니다.**  

이 방식에서는 다음과 같은 **제약 사항**이 존재합니다.  
- 모든 유저가 웹소켓 연결 상태여야만 메시지를 받을 수 있음
- 유저가 반드시 같은 서버에 연결되어 있어야 함
- 각 유저마다 웹소켓을 유지하고 관리해야 함

위에서 언급한 제약 사항들은 이후 섹션에서 해결 방법을 다룰 예정입니다.  
### 3. 오프라인 수신 기능 (최대 30일)
오프라인 수신 기능을 만들기 위해, 앞에서 가정했던 일부 조건들을 다시 생각해보겠습니다. 오프라인 상태인 유저에게 메시지를 전달하려면, 메시지를 데이터베이스에 저장해야 할 필요가 생깁니다.

각 유저별로 **메시지 수신함**을 만들고, 여기에 **아직 전달되지 않은 메시지들을 저장**하는 방식으로 설계해보겠습니다.
메시지가 전송되면, **수신자의 수신함에 메시지를 저장**하고, 만약 수신자가 온라인 상태라면 메시지 즉시 전달을 시도합니다. 만일 유저가 오프라인 상태라면, 메시지를 저장한 후 나중에 다시 접속했을 때 전달하도록 하겠습니다.
#### 메시지 송신 플로우 (2차 버전)
1. 유저가 `sendMessage` 요청을 서버에 보냅니다.  
2. 서버는 데이터베이스의 `ChatParticipant` 테이블을 조회하여, **해당 채팅방에 속한 모든 참여자 목록을 가져옵니다.**  
3. 서버는 한 트랜잭션 내에서 (1) `Message` 테이블에 메시지를 저장하고, (2) 채팅방의 각 참여자의 `Inbox`에 해당 메시지 정보를 저장합니다.
4. 서버는 클라이언트에게 **성공/실패 응답 + `messageId`** 를 반환합니다.  
5. 서버는 **웹소켓 연결 정보 해시맵**을 확인하여, 현재 온라인 상태인 수신자에게 `newMessage` 명령을 통해 메시지를 즉시 전달합니다.  
6. **연결된 수신자**는 메시지를 받은 후, **`ack` 메시지를 서버에 반환**합니다. 서버는 `Inbox` 테이블에서 해당 유저에게 전달된 메시지를 삭제하여, 중복 전송을 방지합니다.

#### 연결되지 않은 수신자 플로우
오프라인 상태였던 유저가 다시 서버에 연결되었을 때, 이전까지 전달되지 않았던 메시지를 정상적으로 받을 수 있도록 처리해야 합니다.
1. 수신자가 서버에 연결되면, **서버는 해당 유저의 `Inbox` 테이블을 조회하여 아직 남아있는 메시지 ID 목록을 가져옵니다.**  
2. 각 `messageId` 에 해당하는 메시지를 `Message` 테이블에서 조회합니다.  
3. 온라인 상태인 수신자에게 `newMessage` 명령을 통해 메시지들을 전달합니다.
4. **연결된 수신자**는 메시지를 받은 후, **`ack` 메시지를 서버에 반환**합니다. 서버는 `Inbox` 테이블에서 해당 유저에게 전달된 메시지를 삭제하여, 중복 전송을 방지합니다.

마지막으로, **간단한 Cron Job을 활용하여 30일 이상 전달되지 않은 `Inbox` 메시지를 정리(cleanup)** 할 수 있습니다. 
### 4. 사진 및 미디어 전송 기능
이상적인 접근 방식은 **사용자가 직접 Blob Storage(예: AWS S3, GCS)에 업로드할 수 있도록 권한을 부여하는 것**입니다.  
이를 위해 **Pre-Signed URL**을 활용하면, 채팅 서버를 거치지 않고도 사용자가 직접 파일을 업로드할 수 있습니다. 이 방식은 제가 `Togather` 프로젝트에서 사용자가 게시글을 올릴 때 미디어를 첨부하는 과정에서도 적용했던 방식입니다.

#### 파일 업로드 플로우
1. 사용자가 `getAttachmentTarget` 요청을 **Chat Server**에 보냅니다.  
2. **Chat Server**는 **Pre-Signed URL**을 생성하여 사용자에게 반환합니다.  
3. 사용자는 이 **Pre-Signed URL**을 이용해 **Blob Storage에 직접 파일을 업로드**합니다.  
4. 업로드가 완료되면, 사용자는 **업로드된 파일의 URL을 Chat Server에 전달**하여 메시지와 함께 저장합니다.  

#### 파일 다운로드 플로우
1. 사용자가 특정 첨부 파일을 다운로드하려고 하면, 서버에 Pre-Signed URL을 요청합니다.  
2. **Chat Server**는 Blob Storage에서 해당 파일에 접근할 수 있는 **Pre-Signed URL을 반환**합니다.  
3. 사용자는 **해당 URL을 통해 직접 Blob Storage에서 파일을 다운로드**합니다.  

이상적으로는 모든 수신자가 파일을 다운로드한 후 자동 삭제하는 것이 가장 효율적이므로, 메시지 전송 후 수신자가 다운로드 했는지 확인하는 로직이 필요합니다. 또한 파일을 일정 기간 이후 자동 삭제하는 정책을 적용시킬 수도 있습니다.
## 상세 설계
### 1. 수십억 명의 유저가 동시 접속할 경우 어떻게 처리할 것인가?
위에서는 단일 서버를 가정했지만, **단일 서버로 수십억 명의 유저를 처리하는 것은 현실적으로 불가능**합니다.  
가장 직관적인 해결 방법은 **서버를 늘려서 트래픽을 분산하는 것(수평 확장, Horizontal Scaling)** 입니다.  

예를 들어, **전 세계적으로 10억 명의 유저가 있다면, 2억 명이 동시 접속하는 것도 충분히 가능한 시나리오**입니다.  
그러나 단순히 서버를 늘리는 것만으로는 해결되지 않는 문제들도 존재합니다.  

먼저, **유저가 서로 다른 서버에 연결될 경우 메시지 전송이 불가능**해집니다. 예를 들어, A 유저가 서버 1에 연결되어 있고, B 유저가 서버 2에 연결되어 있다면 두 유저 간 메시지를 주고받기 위해서는 서버 간의 데이터 동기화가 필요해집니다.

이 문제를 해결하기 위해 **Redis Pub/Sub과 같은 메시지 브로커 시스템을 활용**할 수 있습니다.  
Redis는 **가벼운 해시맵(HashMap) 기반의 소켓 연결 관리 기능을 제공하여, 메시지를 빠르게 라우팅**할 수 있습니다. 
 
#### Redis Pub/Sub 기반 메시지 전달 플로우
**메시지를 받을 때**
1. 사용자가 서버에 웹소켓을 연결합니다.
2. 서버는 Redis Pub/Sub에서 해당 유저 ID를 구독 (subscribe) 합니다.
3. 이후, 해당 유저에게 전달되는 메시지는 **구독된 Pub/Sub 채널을 통해 서버로 전달**됩니다.
4. 서버는 받은 메시지를 웹소켓을 통해 유저에게 전달합니다.

**메시지를 보낼 때**
1. 송신자가 메시지를 보내면, **서버는 수신자의 Pub/Sub 채널에 메시지를 Publish**합니다.  
2. 해당 메시지는 **수신자를 구독(Subscribe) 중인 모든 서버에서 수신**됩니다.  
3. 각 서버는 **수신자가 현재 연결된 상태인지 확인하고, 연결된 경우 웹소켓을 통해 메시지를 전달**합니다.  

여기서 Redis Pub/Sub의 한계도 존재합니다. Redis Pub/Sub은 **"At most once"** 전송 방식을 가지고 있는데, **구독자가 없을 경우 메시지는 손실**될 수 있습니다.

하지만, 우리는 이미 `Inbox` 테이블을 통해 메시지 내구성을 보장하고 있기 때문에 문제가 되지 않습니다.

그러나, 수십억 명의 유저를 감당하려면 Redis Pub/Sub 자체도 확장 가능하게 설계해야 합니다.
Redis는 클러스터 모드(Redis Cluster)를 지원하지만, Pub/Sub 자체는 기본적으로 클러스터 샤딩을 지원하지 않습니다. 즉, 단순히 Redis Cluster를 활성화한다고 해서 Pub/Sub 메시지가 자동으로 여러 노드에 분산되지 않습니다.

따라서, **수동으로 유저 ID를 기준으로 특정 Redis 노드에 Pub/Sub 메시지를 라우팅하는 방식**을 적용해야 합니다.

#### Redis Cluster 기반 샤딩 적용 플로우
Redis Cluster는 데이터를 **키(Key) 값에 따라 여러 노드(Shard)로 분산 저장**하는 기능을 제공합니다.  
이러한 방식은 **Consistent Hashing**을 활용하여, **유저 ID를 기준으로 항상 동일한 노드에서 Pub/Sub 메시지를 처리할 수 있도록 보장**합니다.  

1. **유저 ID를 기반으로 특정 Redis 노드(Shard)를 할당**합니다. (Consistent Hashing 사용)  
2. 각 서버는 **특정 Redis 노드에서만 Pub/Sub 메시지를 Publish & Subscribe** 합니다.  
3. **메시지를 보내는 서버가 수신자의 Redis 노드를 찾아 Publish** 합니다.  
4. 수신자가 연결된 서버는 해당 Redis 노드에서 구독(Subscribe)한 후, 메시지를 전달합니다.  

### 2. 다중 기기 지원 문제
지금까지는 유저가 하나의 기기만 사용한다고 가정했습니다. 그러나 현실적으로 대부분의 유저는 여러 기기를 사용합니다.

예를 들어, 내 휴대폰에서는 메시지를 받았지만 노트북이 꺼져있었다면 노트북을 켰을 때, **누락된 메시지를 받아서 최신 상태로 동기화** 할 수 있어야 합니다. 
하지만, 기존 **유저 단위로 메시지 전달을 추적**하는 `Inbox` 테이블 만으로는 이를 해결할 수 없습니다.

다중 기기 지원 시, 고려해야할 사항은 다음과 같습니다.
- 유저가 사용하는 모든 기기를 추적해야 합니다. 또한, 유저가 로그인하면 현재 활성화된 모든 기기를 관리할 방법이 필요합니다.
- 더 이상 사용되지 않는 기기를 자동으로 비활성화 해야합니다.
- 기기별로 메시지 전송을 관리해야합니다.

이를 해결하기 위해, 기존 설계를 변경하지 않고 방법을 찾아보겠습니다.
#### 1. `Clients` 테이블 추가 (유저별 활성화된 기기 추적)
| **userId** | **clientId (device identifier)** | **lastActive** |
|-----------|-----------------------------------|----------------|
| user123   | phone_abc                         | 2025-02-20     |
| user123   | laptop_xyz                        | 2025-02-19     |
| user456   | tablet_def                        | 2025-02-18     |

#### 2. `Inbox` 테이블을 유저 단위가 아닌 "기기 단위"로 변경
각 기기가 개별적으로 메시지를 관리할 수 있으므로, 기기 간 메시지 동기화 문제를 해결할 수 있고, 기기가 오프라인 상태였다가 다시 연결되었을 때 `Inbox` 테이블을 조회하여 전과 같은 방식으로 최신 메시지들을 받을 수 있습니다.

**변경 전 (유저 단위 Inbox)**
| **userId** | **messageId** | **status**  |
|-----------|-------------|----------|
| user123   | msg_001     | pending  |
| user123   | msg_002     | pending  |

**변경 후 (기기 단위 Inbox)**
| **clientId** | **messageId** | **status**  |
|--------------|---------------|-------------|
| phone_abc    | msg_001       | pending     |
| laptop_xyz   | msg_001       | pending     |
| phone_abc    | msg_002       | pending     |
| laptop_xyz   | msg_002       | pending     |

#### 3. Pub/Sub 구독 방식 변경
기존에는 유저 ID 기준으로 서버가 Pub/Sub을 구독했지만, 이제는 기기 ID 기준으로 구독하도록 변경합니다.
또한, 기존에는 **유저 ID**를 기준으로 메시지를 보냈지만, 이제는 **유저의 활성화된 모든 기기(Client)를 조회하여 각각 메시지를 전송**해야 합니다.

**메시지를 보낼 때**  
1. 송신자가 메시지를 보냅니다.
2. 서버는 **수신자의 `Clients` 테이블을 조회하여 활성화된 기기 목록**을 가져옵니다. 
3. **각 기기의 Pub/Sub 채널에 메시지를 Publish** 합니다.  
4. 해당 기기에 연결된 Chat Server가 메시지를 받아 웹소켓을 통해 전달합니다.  
5. **각 기기가 메시지를 받은 후 `ack`를 반환하면, 해당 기기의 `Inbox`에서 메시지를 삭제**합니다.  

## 마무리
오늘은 위와 같이 대규모 사용자를 대상으로 한 채팅 서비스를 디자인 해보았습니다. 다음 번엔 대규모 사용자를 위한 게시판 서비스를 디자인 해보겠습니다. 감사합니다.

### Reference
- https://redis.io/docs/latest/develop/interact/pubsub/
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-indexes-general.html
- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html
- https://youtu.be/cr6p0n0N-VA
4:["$","$Ld",null,{"post":{"slug":"system-design/messaging-service","categorySlug":"system-design","title":{"ko":"메시징 서비스 시스템 디자인","en":"Design Messaging Service"},"date":"2025-02-20","category":{"ko":"시스템 디자인","en":"System Design"},"description":{"ko":"대규모 메시징 서비스 설계","en":"Let's design messaging service"},"content":"$e"}}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Julie Lee's Portfolio"}],["$","meta","3",{"name":"description","content":"Welcome to Julie's portfolio page."}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
