2:"$Sreact.suspense"
3:I[1523,["851","static/chunks/851-4b7230f426f3d0c3.js","636","static/chunks/636-65bb31d056e95ffd.js","614","static/chunks/614-de6ae75424f2579f.js","797","static/chunks/app/blog/%5B...slug%5D/page-57cc52b850e230d1.js"],"BailoutToCSR"]
4:I[3124,["851","static/chunks/851-4b7230f426f3d0c3.js","636","static/chunks/636-65bb31d056e95ffd.js","614","static/chunks/614-de6ae75424f2579f.js","797","static/chunks/app/blog/%5B...slug%5D/page-57cc52b850e230d1.js"],"default"]
6:I[4707,[],""]
8:I[6423,[],""]
9:I[3483,["648","static/chunks/648-f6f3afee71b2d583.js","768","static/chunks/app/blog/layout-3825e9c62cfb97f3.js"],"default",1]
a:I[5495,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"ThemeProvider"]
b:I[4491,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"LanguageProvider"]
c:I[1890,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"Header"]
5:T2c12,
## 개요
네트워크 계층과 각 계층에서 실행되는 프로토콜들이 서로 어떻게 소통하는지 이해하기 위해 캡슐화(encapsulation)과 디캡슐화(de-encapsulation) 개념을 살펴보겠습니다.

## 캡슐화 과정 (Encapsulation)
캡슐화는 송신 호스트에서 데이터를 보낼 때 각 계층이 자신의 헤더를 추가하면서 이루어집니다.
 
가장 먼저, 애플리케이션 계층에서 생성된 메시지는 전송 계층으로 전달됩니다. 
전송 계층에서는 이 메시지에 **전송 계층 헤더(HT, Transport Layer Header)** 를 추가하여 **세그먼트**를 형성합니다. 
이 추가된 정보는 수신 호스트에서 올바른 애플리케이션으로 데이터를 전달할 수 있도록 돕고, 오류 감지 및 데이터 무결성을 확인하는 역할을 합니다.

세그먼트는 네트워크 계층으로 전달되며, 네트워크 계층에서는 **네트워크 계층 헤더(HN, Network Layer Header)** 를 추가하여 **데이터그램**을 생성합니다.
이 헤더에는 **송신지 및 목적지의 IP 주소**가 포함되어 있어, 데이터가 정확한 목적지로 전송될 수 있도록 합니다.

다음으로, 데이터그램은 데이터 링크 계층으로 이동하며 **데이터 링크 계층 헤더(HL, Link Layer Header)** 를 추가하여 **프레임**을 생성합니다.
프레임은 물리 계층을 통해 비트 단위로 변환되며, 실제 네트워크 매체를 통해 전송됩니다.

## 디캡슐화 과정 (De-encapsulation)
수신 호스트에서는 위 과정을 반대로 수행합니다. 

물리 계층에서 수신된 비트들은 데이터 링크 계층으로 전달되며, 여기서 **프레임의 헤더(HL)** 가 제거된 후 네트워크 계층으로 전달됩니다.

네트워크 계층에서는 **데이터그램의 헤더(HN)** 를 확인하고 제거한 후, 전송 계층으로 데이터를 넘깁니다.

마지막으로 전송 계층에서는 **세그먼트의 헤더(HT)** 를 분석하여 올바른 애플리케이션으로 데이터를 전달합니다. 최종적으로 애플리케이션 계층은 메시지를 해석하고 사용자에게 출력합니다.

### 중간 장치와 캡슐화
송신지에서 목적지까지의 경로에는 **라우터**나 **스위치** 같은 네트워크 장치들이 포함될 수 있습니다. 이러한 장치들은 네트워크 계층을 처리하는 방식이 다릅니다.

**라우터**는 **물리 계층, 데이터 링크 계층, 네트워크 계층 (1-3계층)** 을 처리하며, 패킷을 분석하여 최적의 경로를 찾아 전송합니다.

**스위치**는 **물리 계층과 데이터 링크 계층 (1-2계층)** 까지만 처리하며, 프레임을 기반으로 목적지를 결정합니다.

## 종단 간 원칙 (End-to-End Principle)
종단 간 원칙(E2E principle)은 현재의 인터넷 아키텍쳐를 형성하는데 중요한 역할을 한 설계원칙입니다. 
이 원칙은 특정한 애플리케이션 기능을 네트워크 코어(핵심부)에서 처리하는 것이 아니라, **가능하면 네트워크의 끝단(end systems)** 에서 구현해야 한다는 개념을 제안합니다.

즉, **네트워크 자체는 단순하고 최소한의 역할만 수행해야 하며, 복잡한 기능과 지능은 애플리케이션이 실행되는 종단에서 구현하는 것이 바람직하다**는 철학입니다.

네트워크 설계의 기초가 된 논문 "End-to-End Arguments in System Design" (Saltzer, Reed, Clark)에 따르면, 어떤 기능이 완벽하게 구현되려면 **해당 기능을 필요로 하는 애플리케이션이 직접 수행해야 한다**고 설명합니다.
네트워크 자체에서 특정 기능을 제공하려 해도, 개별 애플리케이션이 이를 완전히 활용하거나 맞춤형으로 조정하기 어렵기 때문입니다.

또한, 모든 애플리케이션이 동일한 기능을 필요로 하는 것이 아니기 때문에, 네트워크 코어에 특정 기능을 추가하면 이를 필요로 하지 않는 애플리케이션에도 강제 적용되는 문제가 발생할 수 있습니다.
따라서, 네트워크 코어는 필수적이고 공통적인 기능만 수행하도록 설계해야 합니다.

종단 간 원칙 덕분에 인터넷은 빠르게 성장할 수 있었습니다. 네트워크의 핵심부를 바꾸는 것은 어렵지만, 끝단에서 혁신적인 애플리케이션과 서비스가 자유롭게 개발될 수 있었기 때문입니다.
다양한 애플리케이션이 유연하게 설계될 수 있었던 것도 네트워크의 코어가 아닌 엔드포인트에서 기능을 구현하는 방식을 따랐기 때문입니다.

결과적으로, **하위 계층의 프로토콜은 특정 애플리케이션에 의존하지 않고, 네트워크 자원을 효율적으로 관리하는 역할에 집중**할 수 있습니다.
이처럼 상위 계층은 개별 애플리케이션에 맞게 설계되고, 하위 계층은 애플리케이션과 무관하게 네트워크 인프라를 최적화하는 것이 종단 간 원칙의 핵심입니다.

### 종단 간 원칙의 위반 사례
종단 간 원칙은 인터넷의 발전과 확장에 많은 이점을 제공했지만, 현실적인 이유로 인해 이 원칙이 지켜지지 못하는 경우도 존재합니다.
대표적인 사례로 **방화벽(Firewall)** 과 **네트워크 주소 변환(NAT, Network address translation) 박스**가 있습니다.

#### 방화벽과 트래픽 필터링
방화벽은 네트워크의 경계에서 동작하며, 네트워크를 통해 들어오거나 나가는 트래픽을 모니터링하는 역할을 합니다.
보안 정책에 따라 정상적인 트래픽은 허용하고, 악의적인 트래픽은 차단합니다.

이건 보안 측면에서 매우 중요하지만, **중간 네트워크 장치가 엔드 호스트 간의 통신을 차단할 수 있기 때문에** 종단 간 원칙을 위반하는 사례가 됩니다.
방화벽이 특정 패킷을 차단하면 송신 호스트와 수신 호스트가 직접 통신하는 것이 불가능해질 수 있기 때문입니다.

#### NAT (Network Address Translation) 박스
인터넷 주소 공간이 부족해지면서 등장한 해결책 중 하나가 **NAT** 입니다. 
NAT은 **하나의 공인 IP 주소를 여러 개의 사설 IP 주소를 사용하는 내부 네트워크와 공유하도록 하는 기술**입니다.

**NAT의 동작 방식**

가정에서 여러 대의 기기를 인터넷에 연결한다고 가정해보면, 보통 Internet service provider(ISP)는 공유기에 **단 하나의 public IP 주소**를 할당합니다.
하지만 가정 내의 **각 장치는 사설 네트워크에서 개별적인 private IP 주소**를 가질 수 있습니다.

이 때, NAT이 동작하는 방식은 다음과 같습니다.
1. 내부 네트워크의 장치가 public internet 상의 호스트로 데이터를 전송하려고 하면, 공유기는 **출발지 IP 주소를 자신의 public IP 주소로 변환**한 후 외부로 전송합니다.
2. 외부에서 오는 응답 패킷의 목적지 IP는 공유기의 public IP 주소이므로, 공유기는 **NAT 변환 테이블을 참고하여 적절한 내부 IP로 변환한 후 전달**합니다.

NAT 변환 테이블은 **public IP 주소 및 포트 번호**와 **내부 네트워크의 IP 주소 및 포트 번호**를 매핑하여 관리합니다.
예를 들어, 내부 호스트 `10.0.0.4`가 포트 `3345`를 사용하여 public IP `120.70.39.4`의 포트 `5001`과 통신한다고 가정하면:
- `출발지 IP 10.0.0.4, 출발지 포트 3345` → 변환 후 `IP: 120.70.39.4, 출발지 포트: 5001`
- `목적지 IP 120.70.39.4, 목적지 포트 5001` → 변환 후 `IP: 10.0.0.4, 목적지 포트: 3345`

이런 방식으로 NAT는 **단 하나의 public IP address를 이용해 다수의 내부 장치가 인터넷과 통신**할 수 있도록 해줍니다.

#### NAT가 종단 간 원칙을 위반하는 이유
NAT를 사용하는 네트워크 내부의 호스트는 public internet에서 직접 접근할 수 없습니다. 즉, 외부 호스트가 NAT 내부의 호스트로 직접 연결을 시도하는 것이 기본적으로 불가능합니다.

종단 간 원칙의 핵심은 **인터넷의 엔드포인트(호스트)들이 직접 통신할수 있도록 하는 것**인데, NAT은 이 원칙을 깨고 중간에서 IP 주소를 변환하고 트래픽을 조정하는 역할을 합니다.

따라서 NAT는 **네트워크 코어에서 특정한 기능을 수행하면서, 엔드 호스트 간 직접적인 통신을 방해하기 때문에** E2E 원칙을 위반하는 사례로 간주됩니다.

#### NAT 문제를 해결하기 위한 우회 방법
NAT로 인해 공인 인터넷의 호스트가 NAT 내부 호스트와 직접 통신할 수 없는 문제가 발생하지만, 이를 해결하기 위한 몇 가지 우회 기법이 존재합니다.
- **STUN (Session Traversal Utilities for NAT)**
  - NAT가 사용되는 환경에서 클라이언트가 **자신의 공인 IP 주소와 포트 번호를 발견할 수 있도록 도와주는 프로토콜**입니다.
  - NAT 뒤에 있는 호스트가 외부 서버를 통해 자신이 사용하는 public IP/port를 확인하고, 이를 통해 통신을 설정할 수 있습니다.
- **UDP Hole Punching**
  - UDP 기반의 연결을 설정할 때, NAT를 통해 양쪽 호스트가 서로 직접 연결을 수립하는 기법입니다.
  - 양쪽 호스트가 **동시에 NAT 바깥의 공용 서버에 패킷을 전송**함으로써, **각 공유기의 NAT 변환 테이블을 조작**하여 직접적인 UDP 연결을 가능하게 합니다.
  - P2P network (Skype, 온라인 게임 등)에서 주로 사용됩니다.
  
  
그럼, **종단 간 원칙을 위반하지 않는 사례**도 살펴보겠습니다.

WiFi와 같은 일부 데이터 링크 계층 프로토콜은 기본적인 오류 수정 기능을 포함하고 있습니다. 이는 물리적 매체가 간섭이나 노이즈로 인해 쉽게 오류가 발생할 수 있기 때문입니다.

그렇다면 **이러한 오류 수정 기능이 E2E principle을 위반하는 것일까요?**

정답은 **위반이 아니다** 입니다.

종단 간 원칙의 위반은 일반적으로 **특정 기능이 엔드 호스트에서만 완벽하게 구현될 수 있음에도 불구하고, 네트워크 내부에서 이를 처리하려고 할 때 발생**합니다. 

하지만 WiFi의 오류 수정 기능은 이와 다릅니다. **물리적 계층의 특성상 반드시 필요한 기능이기 때문**입니다.
무선 네트워크는 유선 네트워크보다 더 많은 간섭과 신호 감쇠를 겪기 때문에, 기본적인 오류 검출 및 수정 기능이 없으면 안정적인 통신이 불가능해집니다.

즉, 이러한 기능이 없으면 상위 계층(전송 계층, 애플리케이션 계층 등)에서 원활한 데이터 송수신이 어려워지므로, 네트워크의 전반적인 신뢰성이 떨어질 수 있습니다.
데이터 링크 계층에서 이루어지는 오류 수정은 종단 간 원칙을 위반하는 것이 아니라, **네트워크의 안정성을 보장하기 위한 현실적인 조치**라고 볼 수 있습니다.
7:["slug","computer-networks/encapsulation-de-encapsulation","c"]
0:["zXeq0Ynwflloxo3nYh1VY",[[["",{"children":["blog",{"children":[["slug","computer-networks/encapsulation-de-encapsulation","c"],{"children":["__PAGE__?{\"slug\":[\"computer-networks\",\"encapsulation-de-encapsulation\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","computer-networks/encapsulation-de-encapsulation","c"],{"children":["__PAGE__",{},[["$L1",["$","$2",null,{"fallback":null,"children":["$","$L3",null,{"reason":"next/dynamic","children":["$","$L4",null,{"post":{"slug":"computer-networks/encapsulation-de-encapsulation","categorySlug":"computer-networks","title":{"ko":"계층 간 캡슐화와 디캡슐화, 종단 간 원칙","en":"Layer Encapsulation and De-encapsulation, E2E principle"},"date":"2025-02-22","category":{"ko":"컴퓨터 네트워크","en":"Computer Networks"},"description":{"ko":"계층 간 캡슐화, 디캡슐화에 대한 설명","en":"How layer encapsulation and de-encapsulation work"},"content":"$5"}}]}]}],null],null],null]},[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$7","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","$L9",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}],"params":{}}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/julie/_next/static/css/2688adaac3b51e6f.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/julie/_next/static/css/e680cef9016abb97.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_29e2ff","children":["$","$La",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}]}]}]}]],null],null],["$Ld",null]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Julie Lee's Portfolio"}],["$","meta","3",{"name":"description","content":"Welcome to Julie's portfolio page."}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
