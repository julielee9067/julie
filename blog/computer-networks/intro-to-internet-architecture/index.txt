2:"$Sreact.suspense"
3:I[1523,["137","static/chunks/137-7c01c277e0f0cc48.js","269","static/chunks/269-a28aad18182cd41e.js","614","static/chunks/614-0bac26ad143a75db.js","797","static/chunks/app/blog/%5B...slug%5D/page-c538284416fbde4d.js"],"BailoutToCSR"]
4:I[3124,["137","static/chunks/137-7c01c277e0f0cc48.js","269","static/chunks/269-a28aad18182cd41e.js","614","static/chunks/614-0bac26ad143a75db.js","797","static/chunks/app/blog/%5B...slug%5D/page-c538284416fbde4d.js"],"default"]
6:I[4707,[],""]
8:I[6423,[],""]
9:I[3483,["648","static/chunks/648-3ae006cfe07c9d94.js","768","static/chunks/app/blog/layout-a0ac16c7cad7b2d1.js"],"default",1]
a:I[5495,["137","static/chunks/137-7c01c277e0f0cc48.js","648","static/chunks/648-3ae006cfe07c9d94.js","185","static/chunks/app/layout-2f9a78561536bd6f.js"],"ThemeProvider"]
b:I[4491,["137","static/chunks/137-7c01c277e0f0cc48.js","648","static/chunks/648-3ae006cfe07c9d94.js","185","static/chunks/app/layout-2f9a78561536bd6f.js"],"LanguageProvider"]
c:I[1890,["137","static/chunks/137-7c01c277e0f0cc48.js","648","static/chunks/648-3ae006cfe07c9d94.js","185","static/chunks/app/layout-2f9a78561536bd6f.js"],"Header"]
5:T3657,
## 개요
인터넷 아키텍쳐는 **서로 다른 네트워크에 위치한 동일한 애플리케이션을 실행하는 호스트를 연결**할 수 있도록 해줍니다. 
컴퓨터 네트워크는 여러 구성 요소로 이루어진 복잡한 시스템이며 다양한 기술을 기반으로 합니다. 
즉, 서로 다른 유형의 네트워크로 구성될 수 있고, 다양한 애플리케이션을 호스팅할 수도 있습니다.

예를 들어, 두 개의 이메일 클라이언트는 **서로 다른 네트워크(Wifi vs. ethernet 케이블)를 사용하면서도 정상적으로 통신**할 수 있습니다. 
그렇다면 이렇게 다양한 기술과 구성 요소들이 어떻게 하나로 연결되어 각 애플리케이션이 필요한 기능을 수행할 수 있을까요?

네트워크 프로토콜을 설계하는 과정에서, 이런 복잡한 시스템을 보다 체계적으로 만들기 위해 **계층(layer)** 개념이 도입되었습니다.

### 계층
**네트워크 아키텍쳐에서는 기능을 여러 계층으로 나누어 구현**합니다. 각 계층은 특정 기능을 담당하며, 아래 계층에서 제공하는 서비스를 기반으로 동작합니다.
또한, 상위 계층이 원활하게 동작할 수 있도록 필요한 서비스를 제공합니다.

항공 시스템으로 비유를 해보겠습니다.
1. 승객은 티켓을 구매하고, 수하물을 맡기고, 공항 게이트를 통과합니다.
2. 비행기가 출발하면 탑승한 승객은 목적지까지 이동합니다.
3. 도착지에서는 비행기에서 내려 게이트를 통과한 후, 수하물을 찾고 공항을 나갑니다.

이 과정에서 각 단계는 특정한 역할을 수행하고, 이전 단계에서 제공한 서비스를 기반으로 운영됩니다. 즉, **한 단계가 끝나야 다음단계가 진행**될 수 있습니다.

네트워크 아키텍쳐에서도 동일한 원리가 적용됩니다. 각 계층은 특정 기능을 수행하고, 모두 연결되어 네트워크가 정상적으로 동작하도록 합니다.

#### 계층 구조의 장점
1. 확장성: 새로운 기술이나 기능을 쉽게 추가할 수 있습니다.
2. 모듈성: 각 기능이 독립적으로 설계되어 유지보수가 편리합니다.
3. 유연성: 특정 계층을 수정하거나 교체하더라도 전체 시스템에 큰 영향을 미치지 않습니다.

위와 같은 이유로 인터넷 아키텍쳐는 계층적인 구조를 기반으로 설계되었고, 효율적이고 비용친화적인 네트워크 구현이 가능합니다.

이렇게 기능을 계층별로 분리하는 것은 분명 여러 장점을 제공하지만, 몇 가지 단점도 존재합니다.

#### 계층 구조의 단점
1. 계층 간 종속성: 일부 계층의 기능이 다른 계층의 정보를 필요로 하는 경우, 계층 구분의 원칙이 어긋날 수 있습니다.
2. 중복된 기능: 오류 복구와 같은 특정 기능이 하위/상위 계층에서 중복으로 구현될 수 있습니다.
3. 추가적인 오버헤드: 계층 간의 추상화로 인해 성능 저하 및 불필요한 데이터 처리가 발생할 수 있습니다.

## OSI 7계층 모델
국제 표준화 기구(ISO)는 네트워크 통신을 구조화하기 위해 아래와 같은 모델을 제안했습니다.
| 계층 |
|-----------|
| 애플리케이션 계층 (Application Layer)   |
| 프레젠테이션 계층 (Presentation Layer)  |
| 세션 계층 (Session Layer)   |
| 전송 계층 (Transport Layer)  |
| 네트워크 계층 (Network Layer)  |
| 데이터 링크 계층 (Data Link Layer)  |
| 물리 계층 (Physical Layer)  |

### 7계층: 애플리케이션 계층 (Application Layer)
애플리케이션 계층은 다양한 **애플리케이션을 지원하는 여러 프로토콜을 포함**합니다. 대표적인 프로토콜은 다음과 같습니다.
- HTTP (HyperText Transfer Protocol): 웹페이지 요청 및 전송
- SMTP (Simple Mail Transfer Protocol): 이메일 송수신
- FTP (File Transfer Protocol): 파일 전송
- DNS (Domain Name System): 도메인 이름을 IP 주소로 변환

애플리케이션 계층에서는 구현된 애플리케이션에 따라 다양한 서비스를 제공하고, 이 계층을 이용하는 인터페이스와 사용되는 프로토콜도 애플리케이션에 따라 달라집니다.

**애플리케이션 계층에서는 데이터를 `메시지 (Message)`라고 부릅니다.**

### 6계층: 프레젠테이션 계층 (Presentation Layer)
프레젠테이션 계층은 **데이터 형식을 변환하는 역할**을 하며, 하위 계층에서 받은 정보를 애플리케이션 계층이 이해할 수 있도록 변환합니다.

예를 들어, 비디오 스트림을 특정 형식으로 변환하거나 숫자 데이터를 big endian에서 little endian으로 변환하는 것 등이 있습니다.

### 5계층: 세션 계층 (Session Layer)
세션 계층은 애플리케이션 간의 세션을 관리하는 역할을 합니다. **동일한 애플리케이션 프로세스에서 여러 개의 전송 스트림이 존재할 경우, 이를 하나의 세션으로 묶어 관리**합니다.

예를 들어, 화상 회의 애플리케이션에서 오디오 스트림과 비디오 스트림을 동기화하여 올바르게 전달하도록 합니다. 세션 계층이 있어야 오디오와 비디오가 일관되게 전달되고 하나의 통합된 세션으로 유지될 수 있습니다.

### 4계층: 전송 계층 (Transport Layer)
전송 계층은 **호스트 간(end-to-end) 통신**을 담당하는 계층으로, 두 가지 주요 프로토콜이 사용됩니다.

#### 1. TCP (Transmission Control Protocol)
- 연결 지향적 서비스 (Connection-oriented service)
- 애플리케이션 계층 메시지의 신뢰성 보장 (**Guaranteed delivery**)
- 흐름 제어 (**Flow control**): 송신자와 수신자의 속도 조정
- 혼잡 제어 (**Congestion control**): 네트워크 혼잡이 감지되면 송신 속도 조절
#### 2. UDP (User Datagram Protocol)
- 연결 없는 **connectionless** 서비스
- **Best-effort 전송**: 신뢰성, 흐름 제어, 혼잡 제어가 없음
- 실시간 스트리밍, VoIP, 온라인 게임 등 **속도가 중요한 애플리케이션**에서 주로 사용

즉, 이 계층은 데이터가 중간에 손실되거나 순서가 뒤바뀌지 않도록 관리하여 최종 사용자에게 올바른 정보를 전달합니다.
**전송 계층에서는 데이터를 `세그먼트 (Segment)`라고 부릅니다.**

### 3계층: 네트워크 계층 (Network Layer)
네트워크 계층의 역할은 **호스트 간 데이터그램(Datagram) 전달**입니다. 라우팅 프로토콜을 통해 최적의 경로를 선택하고, 그 경로를 통해 데이터를 전달합니다.

**데이터 전달 과정**
1. **전송 계층 → 네트워크 계층 전달**: 먼저, 송신 호스트의 4계층인 전송 계층에서 생성된 데이터를 네트워크 계층으로 넘깁니다. 이 데이터는 아직 `세그먼트` 형태로 존재합니다.
2. **데이터그램 변환 및 라우팅**: 네트워크 계층은 받은 세그먼트를 **데이터그램으로 변환**합니다. 이때, 각 데이터그램에는 데이터의 목적지 주소, 출발지 주소 등 필요한 정보가 포함됩니다. 이 정보들을 바탕으로 데이터그램이 목적지에 도착할 수 있도록 **최적의 경로를 찾아 여러 라우터를 거쳐 전송**합니다.
3. **목적지 도착 및 재구성**: 최종적으로 데이터그램들은 목적지 호스트에 도착하면 다시 모여 **원래의 세그먼트 형태로 재구성**되고, 이후 4계층인 전송 계층으로 전달되어 최종 데이터로 사용됩니다.

**핵심 프로토콜**
- **IP (Internet Protocol)**
  - 인터넷의 핵심 프로토콜, 모든 인터넷 호스트 및 네트워크 장치는 IP 프로토콜을 실행해야 함
  - 데이터그램의 **헤더 구조 및 주소 지정 방식 정의**
  - 출발지와 목적지 간 패킷 전송 지원
- **라우팅 프로토콜 (Routing Protocol)**
  - 데이터그램이 송신지에서 목적지까지 **어떤 경로를 따라 이동할지 결정**
  - EX) OSPF, BGP, RIP

**네트워크 계층에서는 데이터를 `데이터그램 (Datagram)`이라고 부릅니다.**

### 2계층: 데이터 링크 계층 (Data Link Layer)
데이터 링크 계층은 **인접한 네트워크 장비 간의 안정적인 데이터 전송**을 담당 합니다. 데이터를 프레임 단위로 묶어, 물리적 연결에서 오류 검출과 재전송 기능을 수행합니다.

**주요 프로토콜 예시**: Ethernet, PPP (Point-to-Point Protocol), WiFi

**데이터 전송 과정**
1. **데이터 준비**: 네트워크 계층에서 생성된 데이터그램이 각 노드(호스트 또는 라우터)로 전달됩니다.
2. **프레임 캡슐화**: 데이터 링크 계층은 이 데이터그램을 프레임으로 포장하면서, 오류 검출 및 수정에 필요한 정보를 추가합니다.
3. **단일 링크 전송**: 프레임은 물리 계층을 통해 바로 인접한 다음 네트워크 장비로 전송됩니다.
4. **프레임 해체**: 다음 노드는 도착한 프레임의 오류를 검사하고, 문제가 없으면 프레임을 열어 원래의 데이터그램을 추출해 네트워크 계층으로 전달합니다.

데이터 링크 계층은 **신뢰성 있는 데이터 전송(Reliable delivery)** 을 기반으로 합니다. 단, 이것은 TCP의 신뢰성 보장과는 다릅니다. TCP는 송신지에서 수신지까지의 전체 경로를 보장하지만, 데이터 링크 계층은 단일 링크에서만 보장합니다.

**데이터 링크 계층에서는 데이터를 `프레임 (Frame)`이라고 부릅니다.**

### 1계층: 물리 계층 (Physical Layer)
물리 계층은 **하드웨어와 직접 상호작용 하며, 물리적 링크를 통해 비트를 전송**하는 역할을 합니다.

프레임 내의 비트들을 송수신하고, 네트워크의 물리적인 전송 매체(케이블, 무선 신호 등)에 따라 다른 방식으로 데이터를 전달합니다.

물리 계층에서 사용 되는 주요 기술 및 매체에는 꼬임쌍선(Twisted-Pair copper wire), 동축 케이블(coaxial cable), 광섬유(single-mode fiber optics) 등이 있습니다.

데이터 링크 계층의 대표적인 프로토콜인 이더넷(Ethernet)은 **물리 계층의 전송 매체에 따라 다른 물리적 프로토콜을 사용**합니다. 예를 들어, UTP(비차폐 꼬임쌍선) 케이블, 무선(Wifi) 등 다양한 매체에서 동작할 수 있도록 설계되었습니다.

**물리 계층에서는 데이터를 `비트 (Bits)`단위로 다룹니다.**

### OSI 7계층을 통한 end-to-end 데이터 이동 경로

한 호스트에서 다른 호스트로 데이터가 이동하는 과정을 OSI 7계층 모델을 이용해 단계별로 살펴보겠습니다.
```
         송신 호스트                                               수신 호스트
──────────────────────────────────────────────────────────────────────────────
     [ 애플리케이션 계층 ]                                         [ 애플리케이션 계층 ]  
      HTTP, FTP, SMTP                                          HTTP, FTP, SMTP 
              │                                                       ▲  
              ▼                                                       │ 
      [ 프레젠테이션 계층 ]                                        [ 프레젠테이션 계층 ]  
       데이터 압축/암호화                                          데이터 복호화/압축 해제  
              │                                                       ▲  
              ▼                                                       │ 
         [ 세션 계층 ]                                             [ 세션 계층 ]  
        세션 설정 및 유지                                          세션 동기화 및 종료  
              │                                                       ▲  
              ▼                                                       │ 
         [ 전송 계층 ]                                             [ 전송 계층 ]  
       TCP/UDP 포트 관리                                        TCP/UDP 데이터 재조립  
              │                                                       ▲  
              ▼                                                       │ 
       [ 네트워크 계층 ]                                           [ 네트워크 계층 ]  
     IP 주소 지정 및 라우팅                                       목적지 IP 확인 및 전달  
              │                                                       ▲  
              ▼                                                       │ 
      [ 데이터 링크 계층 ]                                         [ 데이터 링크 계층 ]  
    MAC 주소 지정 및 프레임화                                     프레임 해체 및 MAC 검증  
              │                                                       ▲  
              ▼                                                       │ 
         [ 물리 계층 ] ─────────────────────────────────────▶       [ 물리 계층 ]  
 비트 스트림 전송 (WiFi, LAN)                                 신호를 비트로 변환하여 상위 전달  

```

## 마무리
이번 포스트에서는 OSI 7 layer 에 대해 간단히 알아보았습니다. 다음 게시글에서는 계층 간의 캡슐화, end-to-end principle 등에 대해 알아보겠습니다.
7:["slug","computer-networks/intro-to-internet-architecture","c"]
0:["YyaiJ8ZcdlnTCqR75HLhh",[[["",{"children":["blog",{"children":[["slug","computer-networks/intro-to-internet-architecture","c"],{"children":["__PAGE__?{\"slug\":[\"computer-networks\",\"intro-to-internet-architecture\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","computer-networks/intro-to-internet-architecture","c"],{"children":["__PAGE__",{},[["$L1",["$","$2",null,{"fallback":null,"children":["$","$L3",null,{"reason":"next/dynamic","children":["$","$L4",null,{"post":{"slug":"computer-networks/intro-to-internet-architecture","categorySlug":"computer-networks","title":{"ko":"인터넷 아키텍쳐 개요","en":"Introduction to Internet Architecture"},"date":"2025-02-22","category":{"ko":"컴퓨터 네트워크","en":"Computer Networks"},"description":{"ko":"인터넷 아키텍쳐와 OSI 7계층에 대한 간단한 설명","en":"Intro to internet architecture and OSI 7 layers"},"content":"$5"}}]}]}],null],null],null]},[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$7","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","$L9",null,{"children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}],"params":{}}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/julie/_next/static/css/064e10fa6619f508.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/julie/_next/static/css/e680cef9016abb97.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_29e2ff","children":["$","$La",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$Lb",null,{"children":[["$","$Lc",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}]}]}]}]],null],null],["$Ld",null]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Julie Lee's Portfolio"}],["$","meta","3",{"name":"description","content":"Welcome to Julie's portfolio page."}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
