2:I[3422,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","636","static/chunks/636-65bb31d056e95ffd.js","254","static/chunks/app/blog/%5Bcategory%5D/page-8636faf3adaa3fd9.js"],"default"]
4:I[4707,[],""]
6:I[6423,[],""]
7:I[3483,["648","static/chunks/648-f6f3afee71b2d583.js","768","static/chunks/app/blog/layout-54d880e6586f2601.js"],"default",1]
8:I[5495,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"ThemeProvider"]
9:I[4491,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"LanguageProvider"]
a:I[1890,["851","static/chunks/851-4b7230f426f3d0c3.js","648","static/chunks/648-f6f3afee71b2d583.js","185","static/chunks/app/layout-396cfab0aaba2929.js"],"Header"]
3:T90c,
프로세스와 스레드는 운영체제에서 가장 기본적인 개념 중 하나입니다. 이 두 개념의 차이점을 자세히 알아보겠습니다.

## 프로세스 (Process)

프로세스는 실행 중인 프로그램의 인스턴스입니다. 각 프로세스는 다음과 같은 특징을 가집니다:

- 독립된 메모리 공간 (Code, Data, Stack, Heap)
- 운영체제로부터 할당받은 시스템 자원
- 최소 1개의 스레드 (메인 스레드) 포함

```c
// 프로세스 생성 예제
#include <unistd.h>

int main() {
    pid_t pid = fork();  // 새로운 프로세스 생성

    if (pid == 0) {
        // 자식 프로세스
        printf("Child process\n");
    } else {
        // 부모 프로세스
        printf("Parent process\n");
    }
    return 0;
}
```

## 스레드 (Thread)

스레드는 프로세스 내에서 실행되는 작업의 단위입니다:

- 프로세스 내의 메모리 공간 공유
- 독립적인 스택과 레지스터 보유
- 빠른 컨텍스트 스위칭

```java
// 자바에서 스레드 생성 예제
public class ThreadExample extends Thread {
    public void run() {
        System.out.println("Thread is running");
    }

    public static void main(String[] args) {
        ThreadExample thread = new ThreadExample();
        thread.start();
    }
}
```

## 주요 차이점

| 특징             | 프로세스  | 스레드       |
|-----------------|---------|------------|
| 메모리 공간       | 독립적    | 공유         |
| 통신 비용        | 높음     | 낮음         |
| 컨텍스트 스위칭    | 무거움    | 가벼움        |
| 안정성           | 높음     | 상대적으로 낮음  |

### 메모리 구조

```plaintext
프로세스 메모리 구조:
+------------------+
|       Stack      |  <- 각 스레드마다 독립적
|        ↓         |
|        ↑         |
|       Heap       |  <- 공유
|------------------|
|       Data       |  <- 공유
|------------------|
|       Code       |  <- 공유
+------------------+
```

## 실제 사용 사례

1. **멀티 프로세스**
   - 웹 브라우저의 탭
   - 데이터베이스 서버
   - 운영체제 서비스

2. **멀티 스레드**
   - 웹 서버의 요청 처리
   - 게임의 렌더링과 물리 연산
   - UI 응답성 유지
  5:["category","cs","d"]
0:["SRYgVCcEU66Jg2rN0n3H7",[[["",{"children":["blog",{"children":[["category","cs","d"],{"children":["__PAGE__?{\"category\":\"cs\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["category","cs","d"],{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"category":"cs","filteredPosts":[{"slug":"cs/process-thread","categorySlug":"cs","title":{"ko":"프로세스와 스레드의 차이","en":"Process vs Thread"},"date":"2025-02-19","category":{"ko":"컴퓨터 공학","en":"Computer Science"},"description":{"ko":"프로세스와 스레드에 대한 차이점 및 개념 설명","en":"Differences between processes and threads."},"content":"$3"}]}],null],null],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","$L7",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}],"params":{}}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/julie/_next/static/css/2688adaac3b51e6f.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/julie/_next/static/css/e680cef9016abb97.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_29e2ff","children":["$","$L8",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$L9",null,{"children":[["$","$La",null,{}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}]}]}]}]],null],null],["$Lb",null]]]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Julie Lee's Portfolio"}],["$","meta","3",{"name":"description","content":"Welcome to Julie's portfolio page."}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
